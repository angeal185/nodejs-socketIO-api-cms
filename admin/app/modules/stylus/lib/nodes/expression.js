var Node=require("./node"),nodes=require("../nodes"),utils=require("../utils"),Expression=module.exports=function(e){Node.call(this),this.nodes=[],this.isList=e};Expression.prototype.__defineGetter__("isEmpty",function(){return!this.nodes.length}),Expression.prototype.__defineGetter__("first",function(){return this.nodes[0]?this.nodes[0].first:nodes.null}),Expression.prototype.__defineGetter__("hash",function(){return this.nodes.map(function(e){return e.hash}).join("::")}),Expression.prototype.__proto__=Node.prototype,Expression.prototype.clone=function(e){var t=new this.constructor(this.isList);return t.preserve=this.preserve,t.lineno=this.lineno,t.column=this.column,t.filename=this.filename,t.nodes=this.nodes.map(function(n){return n.clone(e,t)}),t},Expression.prototype.push=function(e){this.nodes.push(e)},Expression.prototype.operate=function(e,t,n){switch(e){case"[]=":var s,o,r=this,i=utils.unwrap(t).nodes,n=utils.unwrap(n);return i.forEach(function(e){if(s=r.nodes.length,"unit"==e.nodeName){for(var t=e.val<0?s+e.val:e.val,i=t;t-- >s;)r.nodes[t]=nodes.null;r.nodes[i]=n}else e.string&&(o=r.nodes[0])&&"object"==o.nodeName&&o.set(e.string,n.clone())}),n;case"[]":var o,u=new nodes.Expression,p=utils.unwrap(this).nodes,i=utils.unwrap(t).nodes;return i.forEach(function(e){"unit"==e.nodeName?o=p[e.val<0?p.length+e.val:e.val]:"object"==p[0].nodeName&&(o=p[0].get(e.string)),o&&u.push(o)}),u.isEmpty?nodes.null:utils.unwrap(u);case"||":return this.toBoolean().isTrue?this:t;case"in":return Node.prototype.operate.call(this,e,t);case"!=":return this.operate("==",t,n).negate();case"==":var a,l,s=this.nodes.length,t=t.toExpression();if(s!=t.nodes.length)return nodes.false;for(var h=0;h<s;++h)if(a=this.nodes[h],l=t.nodes[h],!a.operate(e,l).isTrue)return nodes.false;return nodes.true;default:return this.first.operate(e,t,n)}},Expression.prototype.toBoolean=function(){return this.nodes.length>1?nodes.true:this.first.toBoolean()},Expression.prototype.toString=function(){return"("+this.nodes.map(function(e){return e.toString()}).join(this.isList?", ":" ")+")"},Expression.prototype.toJSON=function(){return{__type:"Expression",isList:this.isList,preserve:this.preserve,lineno:this.lineno,column:this.column,filename:this.filename,nodes:this.nodes}};
